fixes:
  - id: 1
    file: tests/setup.js
    action: add-test-env
    reason: "JWT signing failed in tests because JWT_SECRET was not set."
    before: "No centralized test env â€” process.env.JWT_SECRET was undefined during tests."
    after: "File sets process.env.JWT_SECRET = 'test-secret-key' so jwt.sign() works in test runs."
    how_to_reproduce: "Create tests/setup.js with `process.env.JWT_SECRET = 'test-secret-key'` and require it at top of tests."
    notes: "This file is intentionally simple and only for tests. Use a secure secret in production and do not commit real secrets."

  - id: 2
    file: tests/auth.register.test.js (and tests/auth.login.test.js)
    action: require-test-setup
    reason: "Tests were running without the test env being loaded, causing jwt.sign secret errors."
    before: "tests did not `require('./setup')` so JWT_SECRET was missing for registration tests."
    after: "Added `require('./setup')` at the top of test files so the setup runs before tests."
    how_to_reproduce: "Add `require('./setup');` as first line in test files that need env config."

  - id: 3
    file: src/middleware/validator.middleware.js
    action: include-message-on-validation-error
    reason: "Validation middleware returned only `{ errors: [...] }` while tests expected a top-level `message` field."
    before: "Returned `res.status(400).json({ errors: errors.array() })`."
    after: "Now returns `res.status(400).json({ message: 'Validation failed', errors: errors.array() })`."
    how_to_reproduce: "Trigger validation errors (POST /api/auth/register with empty payload) and observe the response shape."
    notes: "Including a top-level `message` keeps API responses friendly for clients and satisfies existing tests."

  - id: 4
    file: src/controllers/login.controller.js
    action: align-with-tests-input-and-lookup
    reason: "Controller expected username+email+password and searched by username||email, but tests send only username+password."
    before: |
      "Accepted { username, email, password } and returned 400 if any missing. Looked up user with `findOne({ $or: [{username},{email}] })`."
    after: |
      "Now accepts { username, password } only (matches tests), returns 400 with message 'Username and password are required' and searches by `username` only."
    how_to_reproduce: "POST /api/auth/login with only username+password as tests do."
    notes: "This change keeps the login API minimal and consistent with tests. If you want to support login by email in the future, expand tests and logic accordingly."

  - id: 5
    file: src/controllers/auth.controller.js
    action: include-top-level-fields-in-response
    reason: "Registration controller returned a nested `user` object only; tests expected top-level `id`, `username`, `email` too."
    before: "Response shaped as `{ message: 'User registered successfully', user: { ... } }`."
    after: |
      "Response now includes top-level `id`, `username`, `email`, `message`, and still contains nested `user` for richer client data."
    how_to_reproduce: "POST /api/auth/register with valid payload and inspect response JSON."
    notes: "You can standardize on either flat or nested responses; tests were written for the flat keys so this change preserves compatibility.">

meta:
  verified_commands:
    - "# Run all tests (Command Prompt recommended on Windows):"
    - "npm test"
    - "# Run a single test file:"
    - "npm test tests/auth.login.test.js"
  verification_result: "All tests passed after fixes (2 suites, 7 tests)."
  recommendations:
    - "Add `tests/setup.js` to Jest's `setupFiles` in package.json or jest config so you don't need to require it manually in every test file."
    - "Decide on a canonical response shape (flat vs nested) and update controllers + tests accordingly to avoid duplicated fields."
    - "Never commit real secrets; use CI secret store for production env variables."
  lessons_learned:
    - "Always ensure test environment variables (like JWT_SECRET) are available to tests.":
    - "Keep API response shapes consistent between implementation and tests.":
    - "Validation middleware should return a predictable shape (message + errors) for clients and tests."
